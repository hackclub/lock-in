<% if current_user %> <!-- unless current_user.onboarded -->
    <!-- <script src="https://unpkg.com/@sjmc11/tourguidejs/dist/tour.js" crossorigin="anonymous" referrerpolicy="no-referrer"></script> -->

    <!-- <link rel="stylesheet" href="https://unpkg.com/@sjmc11/tourguidejs/dist/css/tour.min.css"> -->
<% end %>

<%= turbo_frame_tag "timer" do %>
    <%= render "timer" %>
<% end %>

<div id="videos-container">
    <%= render "user_video", local: true, user_presence: current_user.user_presence %>

    <% peer_presences.each do |peer_presence| %>
        <%= render "user_video", user_presence: peer_presence %>
    <% end %>
</div>

<div id="btn-container">
    <div role="button" class="imgbtn" onclick="shareScreen()" data-tg-tour="<span>You're encouraged to share your screen - you'll get a 1.1x mult if you do!</span>">
        <%= image_tag "/laptop.png", height: 64 %>
        <span>Share screen</span>
    </div>
    <div role="button" class="imgbtn">
        <%= image_tag "/confused-rac.png", height: 64 %>
        <span>Poke</span>
    </div>
    <a class="imgbtn" href="slack://channel?team=T0266FRGM&id=U03DFNYGPCN">
        <%= image_tag "/rac-gun.png", height: 64 %>
        <span>Report</span>
    </a>

    <div
        role="button"
        class="imgbtn"
        id="enable-notifs"
        onclick="Notification.requestPermission(); this.style.display = 'none';"
        style="display: none;"
    >
        <%= image_tag "/notif-rac.png", height: 64 %>
        <span>Enable notifs</span>
    </div>

    <%= link_to leave_room_path, data: { turbo_method: :post, tg_tour: "<span>This disconnects you from the call...</span>" }, role: "button", class: "imgbtn" do  %>
        <%= image_tag "/rac-leave.png", height: 64 %>
        <span>Leave room</span>
    <% end %>

    <!--
    <%= link_to room_path, data: { turbo_method: :delete, turbo_confirm: 'Are you sure? This will boot everyone out', tg_tour: "<span>...while this ends it for everyone!</span>" }, role: "button", class: "imgbtn" do %>
        <%= image_tag "/rac-end.png", height: 64 %>
        <span>End call</span>
    <% end %>
    -->
</div>

<script type="module">
  import consumer from "channels/consumer";

  let stream, screenStream, peer, myScreenCall, muted;
  const peerPresences = <%= raw peer_presences.map(&:peer_id).to_json %>;

    const localVideo = document.getElementById("local-video")

    const notifEnableButton = document.getElementById("enable-notifs")
    if (Notification.permission !== "granted") {
        notifEnableButton.style.display = "flex"
    }

    document.querySelector("a[href='<%= leave_room_path %>']").addEventListener("turbo:click", (e) => {
      e.preventDefault()
      console.log({e})
    })

    document.addEventListener("turbolinks:before-visit", (e) => {
      console.log("turbolinks:before-visit")
    })

    // Push to talk
    document.addEventListener("keydown", (e) => {
      if (e.key === " " && !muted) {
        muted = true
        stream.getAudioTracks()[0].enabled = true;
        // localVideo.style.filter = "grayscale(0)"
        console.log("Talk!")

        consumer.subscriptions.subscriptions
          .find((a) => a.identifier.includes("RoomChannel"))
          .send({ type: "MIC_ON" })

        e.preventDefault()
      }
    })
    document.addEventListener("keyup", ({ key }) => {
      if (key === " ") {
        muted = false
        // localVideo.style.filter = "grayscale(0.65)"
        console.log("no more talking")

        consumer.subscriptions.subscriptions
          .find((a) => a.identifier.includes("RoomChannel"))
          .send({ type: "MIC_OFF" })
      }
    })

    document.addEventListener("micon", ({ detail }) => {
      const pid = detail.peerId

      const id = pid === "<%= @peer_id %>" ? "local-video" : `remote-video-${pid}`
      document.getElementById(id).style.filter = "grayscale(0)"
    })
    document.addEventListener("micoff", ({ detail }) => {
      const pid = detail.peerId

      const id = pid === "<%= @peer_id %>" ? "local-video" : `remote-video-${pid}`
      document.getElementById(id).style.filter = "grayscale(0.65)"
    })

    navigator.mediaDevices.getUserMedia({ video: true, audio: true }).then((s) => {
        stream = s
        stream.getAudioTracks()[0].enabled = false;

        peer = new Peer("<%= @peer_id %>", {
        host: "0.peerjs.com",
        port: 443,
        secure: true,
        ...<%= raw @turn_creds.to_json %>
        })
        peer.on('error', console.error);

        navigator.mediaDevices.enumerateDevices()
          .then((devices) => {
            console.log({devices})
          })

        localVideo.srcObject = stream

        // Register event listeners to react to calls
        peer.on("call", (call) => {
          console.log("Incoming call", call)
          call.answer(stream)
          console.log("Answered incoming call", call)

          call.on("stream", async (remoteStream) => {
            console.log("call on stream 1", "Incoming stream from call2", {peerPresences}, call, remoteStream)

            call.stream = remoteStream

            if (!peerPresences.includes(call.peer)) {
              peerPresences.push(call.peer)
              if (!document.querySelector(`user-video-${call.peer}`)) {
                console.log(`A new peer called us (${call.peer} @ ${performance.now()}). I'm inserting and connecting a new user video partial.`)
                const newUserVideo = await fetch(`<%= user_video_room_path %>?peerid=${call.peer}`, { headers: { "X-CSRF-Token": "<%= session[:_csrf_token] %>" } }).then((d) => d.text());
                document.getElementById("videos-container").insertAdjacentHTML("beforeend", newUserVideo);
                drawOutlines()
              }
            }

            const videoOrStream = call.metadata.type === "screen" ? "screen" : "video"
            const el = document.getElementById(`remote-${videoOrStream}-${call.peer}`)
            const elContainer = document.getElementById(`remote-${videoOrStream}-${call.peer}-container`)
            if (el) el.srcObject = remoteStream;
            if (elContainer) elContainer.style.display = "block"

            call.on("close", () => console.log(`The connection to peer ${call.peer} was closed`))
          })
        })

        peer.on('open', (id) => {
        // Call everyone in the call
        peerPresences.forEach((peerId) => {
            const call = peer.call(peerId, stream, {
            metadata: { type: "video" }
            });
            console.log("Okay, I called", peerId, call, stream);
            call.on('error', (error) => {
            console.log(error);
            });

            call.on("stream", (remoteStream) => {
            call.stream = remoteStream
            console.log("Incoming stream from call2", call, remoteStream)

            const videoOrStream = call.metadata.type === "screen" ? "screen" : "video"
            const el = document.getElementById(`remote-${videoOrStream}-${call.peer}`)
            const elContainer = document.getElementById(`remote-${videoOrStream}-${call.peer}-container`)
            if (el) el.srcObject = remoteStream
            if (elContainer) elContainer.style.display = "block"

            // remoteStream.on("close", () => el.style.display = "none")
            })
        });
        });

        <% unless current_user.user_pref.had_room_tour %>
          const endTour = () =>
            fetch("<%= tour_end_room_path %>", { method: "POST", headers: { "X-CSRF-Token": "<%= session[:_csrf_token] %>" } });

          setTimeout(() => {
            const tg = new tourguide.TourGuideClient()
            tg.onFinish(endTour)
            tg.start()
          }, 1000)
        <% end %>
    })

    window.shareScreen = async function() {
        screenStream = await navigator.mediaDevices.getDisplayMedia({
            video: {
                cursor: "always",
            },
            audio: false
        });

        const localScreen = document.getElementById("local-screen")
        const localScreenContainer = document.getElementById("local-screen-container")
        localScreen.srcObject = screenStream
        localScreenContainer.style.display = "block"

        // Listen for "ended" on each screen track so we can immediately stop sharing
        screenStream.getVideoTracks().forEach((track) => {
        track.addEventListener("ended", () => {
            console.log("--------->>>> Screenshare track ended")
            if (myScreenCall) {
            myScreenCall.close();
            }
            localScreenContainer.style.display = "none"

            // Also broadcast a message letting remote peers know we stopped screensharing
            fetch("/room/screenshare-ended", {
            method: "POST",
            headers: { "Content-Type": "application/json" }
            });
        })
        })

        peerPresences.forEach((peerId) => {
        myScreenCall = peer.call(peerId, screenStream, { metadata: { type: "screen" } } );

        myScreenCall.on("error", (err) => console.error("Screen share call error:", err));
        });
    }

  document.addEventListener("userjoin", ({ detail }) => {
      new Notification(`${detail.username} just joined your call!`);
  })

  function refreshCodingActivities() {
    if (typeof Turbo !== 'undefined') {
      fetch("<%= coding_activity_refresh_room_path %>", { headers: { "Accept": 'text/vnd.turbo-stream.html', "X-CSRF-Token": "<%= session[:_csrf_token] %>" } })
          .then(response => response.text())
          .then(html => Turbo.renderStreamMessage(html));
    } else {
      console.warn("Was going to refreshCodingActivities but Turbo isn't present.")
    }
  }
  refreshCodingActivities()
  setInterval(refreshCodingActivities, 10_000)

  function screengrab() {
    const video = document.getElementById("local-video");

    const canvas = document.createElement('canvas');
    canvas.height = video.videoHeight;
    canvas.width = video.videoWidth;
    const ctx = canvas.getContext('2d');
    ctx.drawImage(video, 0, 0, canvas.width, canvas.height);

    fetch("<%= screenshot_room_path %>", {
      headers: { "Content-Type": 'application/json', "X-CSRF-Token": "<%= session[:_csrf_token] %>" },
      method: "POST",
      body: JSON.stringify({ data_url: canvas.toDataURL("image/png") })
    })
        .then(response => response.text())
        .then(html => Turbo.renderStreamMessage(html));
  }

  setInterval(() => {
    console.log(screengrab())
  }, 60_000)
</script>
